"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.clean = void 0;
const chalk_1 = __importDefault(require("chalk"));
const del_1 = __importDefault(require("del"));
const clean = (options = {}) => {
    var _a, _b, _c, _d, _e, _f;
    const patterns = (_a = options.patterns) !== null && _a !== void 0 ? _a : [];
    const dryRun = (_b = options.dryRun) !== null && _b !== void 0 ? _b : false;
    const delOptions = (_c = options.options) !== null && _c !== void 0 ? _c : {};
    const sync = (_d = options.sync) !== null && _d !== void 0 ? _d : true;
    const cleanOn = (_e = options.cleanOn) !== null && _e !== void 0 ? _e : 'start';
    const verbose = (_f = options.verbose) !== null && _f !== void 0 ? _f : false;
    const logCleanFiles = (cleanFiles) => {
        if (!verbose) {
            return;
        }
        if (dryRun) {
            console.log(chalk_1.default.blue('i'), `Clean plugin invoked in dryRun mode`);
        }
        if (cleanFiles.length) {
            console.log(chalk_1.default.blue('i'), `File Cleaned:\n${cleanFiles.join('\n')}`);
        }
    };
    const handler = sync
        ? () => {
            const cleanFiles = del_1.default.sync(patterns, {
                dryRun,
                ...delOptions,
            });
            logCleanFiles(cleanFiles);
        }
        : () => {
            (0, del_1.default)(patterns, {
                dryRun,
                ...delOptions,
            }).then((cleanFiles) => {
                logCleanFiles(cleanFiles);
            });
        };
    return {
        name: 'esbuild:clean',
        setup({ onStart: registerOnStartCallback, onEnd: registerOnEndCallback }) {
            if (!patterns.length) {
                return;
            }
            if (cleanOn === 'start' || cleanOn === 'both') {
                registerOnStartCallback(() => {
                    handler();
                });
            }
            if (cleanOn === 'end' || cleanOn === 'both') {
                registerOnEndCallback(() => {
                    handler();
                });
            }
        },
    };
};
exports.clean = clean;
